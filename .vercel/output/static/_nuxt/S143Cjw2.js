import{Z as p,r as l,p as P}from"./DNOTuklV.js";const m=p("partners",()=>{const e=l([]),s=l([]),{getPartners:i,getPartnerById:d,createPartner:c,updatePartner:u,deletePartner:y,getServices:v}=P();return{partners:e,services:s,addPartner:async t=>{const a=await c(t);return e.value.push(a),a.id},getPartnerByIdSync:t=>e.value.find(a=>a.id===t),getPartnerById:d,getServicesByIds:t=>s.value.filter(a=>t.includes(a.id)),updatePartner:async(t,a)=>{const o=await u(t,a),S=e.value.findIndex(B=>B.id===t);return S!==-1&&(e.value[S]=o),o},deletePartner:async t=>{await y(t),e.value=e.value.filter(a=>a.id!==t)},loadFromStorage:async()=>{try{const[t,a]=await Promise.all([i(),v()]);e.value=Array.isArray(t)?t:[],s.value=Array.isArray(a)?a:[]}catch(t){console.error("Failed to load partners and services:",t),e.value=[],s.value=[]}}}}),A=p("units",()=>{const e=l([]),{getUnits:s,getUnitsByPartner:i,createUnit:d,updateUnit:c,deleteUnit:u}=P();return{units:e,addUnit:async r=>{const n=await d(r);return e.value.push(n),n.id},getUnitsByPartnerSync:r=>e.value.filter(n=>n.partnerId===r),getUnitByIdSync:r=>e.value.find(n=>n.id===r),getUnitsByPartner:i,updateUnit:async(r,n)=>{const t=await c(r,n),a=e.value.findIndex(o=>o.id===r);return a!==-1&&(e.value[a]=t),t},deleteUnit:async r=>{await u(r),e.value=e.value.filter(n=>n.id!==r)},loadFromStorage:async()=>{try{const r=await s();e.value=Array.isArray(r)?r:[]}catch(r){console.error("Failed to load units:",r),e.value=[]}}}});export{A as a,m as u};
